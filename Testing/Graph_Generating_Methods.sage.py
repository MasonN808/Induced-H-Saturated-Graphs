

# This file was *autogenerated* from the file Graph_Generating_Methods.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_11 = Integer(11); _sage_const_6 = Integer(6); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_12 = Integer(12); _sage_const_22 = Integer(22); _sage_const_13 = Integer(13); _sage_const_14 = Integer(14); _sage_const_15 = Integer(15); _sage_const_16 = Integer(16); _sage_const_17 = Integer(17); _sage_const_18 = Integer(18); _sage_const_20 = Integer(20); _sage_const_19 = Integer(19); _sage_const_21 = Integer(21); _sage_const_23 = Integer(23)# Import module General_Methods.sage
import os
os.system('sage --preparse General_Methods.sage')
os.system('mv General_Methods.sage.py General_Methods.py')
from General_Methods import *


#----------------------------------------------------------------------------------------------------#
#-----Method finding Induced H-Saturated Graphs in some Graph G of order n under Definition 1--------#
#----------------------------------------------------------------------------------------------------#

def find_indsat_graphs_def1(n, H):
    """
    Finds induced H-saturated graphs from G where G is of order n under definition 1

    @param n: int -  The order of G
    @param H: Subgraph - A sage graph
    @return:
    """
    indSatGraphs = []
    # Begin runtime
    startTime = datetime.now()
    # Make all subgraphs with 3 vertices or less
    for G in graphs.nauty_geng("{0} -c".format(n)):
        # Draw graph and print edge set
        if is_indsat_def1(G,H):
            G.show()
            indSatGraphs.append(G.edges(labels = False))
            print(G.edges(labels = False))
    # If there are no induced H-saturated graphs G
    if not indSatGraphs:
        print("No Induced H-Saturated Graphs for n = " + str(n) + " under definition 1")
    else:
        print(str(indSatGraphs) + "\n" + "---------------------------------------------------------------" + "\n" + "Total number of induced H-saturated graphs G on " + str(n) + " vertices under definition 1: " + str(len(indSatGraphs)))
    # End runtime
    print("---------------------------------------------------------------" + "\n" + "RUNTIME" + "\n" + str(
    datetime.now() - startTime) + "\n" + "---------------------------------------------------------------")

#----------------------------------------------------------------------------------------------------#
#-----Method finding Induced H-Saturated Graphs in some Graph G of order n under Definition 2--------#
#----------------------------------------------------------------------------------------------------#

def find_indsat_graphs_def2(n, H):
    """
    Finds induced H-saturated graphs from G where G is of order n under definition 2

    @param n: int -  The order of G
    @param H: Subgraph - A sage graph
    @return:
    """
    indSatGraphs = []
    # Begin runtime
    startTime = datetime.now()
    # Make all subgraphs with 3 vertices or less
    for G in graphs.nauty_geng("{0} -c".format(n)):
        # Draw graph and print edge set
        if is_indsat_def2(G,H):
            G.show()
            indSatGraphs.append(G.edges(labels = False))
            print(G.edges(labels = False))
    # If there are no induced H-saturated graphs G
    if not indSatGraphs:
        print("No Induced H-Saturated Graphs for n = " + str(n) + " under definition 2")
    else:
        print(str(indSatGraphs) + "\n" + "---------------------------------------------------------------" + "\n" + "Total number of induced H-saturated graphs G on " + str(n) + " vertices under definition 2: " + str(len(indSatGraphs)))
    # End runtime
    print("---------------------------------------------------------------" + "\n" + "RUNTIME" + "\n" + str(
    datetime.now() - startTime) + "\n" + "---------------------------------------------------------------")




# Testing
if __name__ == '__main__':
    # Any edits are welcome here for testing
    # start runtime timer
    startTime = datetime.now()
    # Edges of graph G
    E0 = ({_sage_const_0 : [_sage_const_1 , _sage_const_11 , _sage_const_6 ], _sage_const_1 : [_sage_const_2 ], _sage_const_2 : [_sage_const_3 ], _sage_const_3 : [_sage_const_4 , _sage_const_1 , _sage_const_0 ], _sage_const_4 : [_sage_const_5 ], _sage_const_5 : [_sage_const_6 ], _sage_const_6 : [_sage_const_7 ], _sage_const_7 : [_sage_const_5 , _sage_const_4 , _sage_const_1 , _sage_const_8 ], _sage_const_8 : [_sage_const_9 , _sage_const_2 ], _sage_const_9 : [_sage_const_3 , _sage_const_10 ],
           _sage_const_10 : [_sage_const_4 , _sage_const_11 ], _sage_const_11 : [_sage_const_5 , _sage_const_9 , _sage_const_8 ], _sage_const_12 : [_sage_const_6 , _sage_const_0 , _sage_const_22 , _sage_const_5 , _sage_const_11 ], _sage_const_13 : [_sage_const_6 , _sage_const_7 , _sage_const_3 , _sage_const_2 , _sage_const_0 , _sage_const_1 ], _sage_const_14 : [_sage_const_8 , _sage_const_7 , _sage_const_2 , _sage_const_1 ],
           _sage_const_15 : [_sage_const_0 , _sage_const_3 , _sage_const_9 , _sage_const_8 , _sage_const_1 , _sage_const_2 , _sage_const_13 ], _sage_const_16 : [_sage_const_3 , _sage_const_9 , _sage_const_10 , _sage_const_4 , _sage_const_14 ], _sage_const_17 : [_sage_const_7 , _sage_const_4 , _sage_const_6 , _sage_const_5 , _sage_const_11 , _sage_const_10 ], _sage_const_18 : [_sage_const_11 , _sage_const_12 , _sage_const_0 , _sage_const_6 , _sage_const_20 , _sage_const_5 ],
           _sage_const_19 : [_sage_const_6 , _sage_const_4 , _sage_const_7 , _sage_const_0 , _sage_const_1 , _sage_const_13 , _sage_const_5 , _sage_const_17 ], _sage_const_20 : [_sage_const_7 , _sage_const_8 , _sage_const_14 , _sage_const_1 , _sage_const_2 ], _sage_const_21 : [_sage_const_9 , _sage_const_8 , _sage_const_3 , _sage_const_2 , _sage_const_15 , _sage_const_11 , _sage_const_10 ], _sage_const_22 : [_sage_const_9 , _sage_const_10 , _sage_const_4 , _sage_const_3 , _sage_const_16 ],
           _sage_const_23 : [_sage_const_11 , _sage_const_9 , _sage_const_8 , _sage_const_5 , _sage_const_4 , _sage_const_21 , _sage_const_17 , _sage_const_10 ]})
    # Edges of subgrpah H
    E1 = {_sage_const_0 : [_sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_4 ]}
    E2 = {_sage_const_0 : [_sage_const_1 , _sage_const_2 , _sage_const_3 ]}
    G=Graph(E0);
    H=Graph(E2);
    comb_group1_def1(G,H)
    comb_group1_def2(G,H)
    find_indsat_graphs_def1(_sage_const_8 , H)
    find_indsat_graphs_def2(_sage_const_8 , H)

